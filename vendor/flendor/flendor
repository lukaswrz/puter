#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

shopt -s nullglob

progname=$0

warn() {
    local line
    for line in "$@"; do
        echo "$progname: $line" 1>&2
    done
}

error() {
    warn "$@"

    exit 1
}

args=$(
    getopt \
        --options d:rv \
        --longoptions vendor:,refresh,verbose \
        --name "$progname" \
        -- "$@"
)

eval set -- "$args"

nixflags=()
rmflags=()
rsyncflags=()
prefetchflags=()
while true; do
    case $1 in
    -d | --vendor)
        vendor=$2
        shift 2
        ;;
    -r | --refresh)
        prefetchflags+=(--refresh)
        shift
        ;;
    -v | --verbose)
        nixflags+=(--verbose)
        rmflags+=(--verbose)
        rsyncflags+=(--verbose)
        shift
        ;;
    --)
        shift
        break
        ;;
    esac
done

if (($# > 0)); then
    error 'too many arguments'
fi

json=$(< flendor.json)

if [[ ! -v vendor ]]; then
    vendor=$(jq --exit-status --raw-output '.vendor' <<<"$json")
fi

updates=()
keeppaths=()

while IFS= read -r k; do
    name=$(jq --null-input --argjson k "$k" --raw-output '$k')

    if [[ $name =~ / ]]; then
        error 'flake input name cannot contain slashes'
    fi
    
    flake=$(jq --argjson k "$k" --raw-output '.flakes.[$k]' <<<"$json")

    dest="$vendor/$name"

    keeppaths+=("$dest")

    warn "copying flake $flake to $dest"

    src=$(nix "${nixflags[@]}" flake prefetch --json "${prefetchflags[@]}" -- "$flake" | jq --exit-status --raw-output '.storePath')

    rsync --recursive --delete --mkpath --chmod=D750,F640 "${rsyncflags[@]}" -- "$src/" "$dest"

    updates+=("$name")
done < <(jq '.flakes | keys[]' <<<"$json")

for name in "${updates[@]}"; do
    nix "${nixflags[@]}" flake update -- "$name"
done

for path in "$vendor"/{,.}*; do
    keep=0

    for keeppath in "${keeppaths[@]}"; do
        a=$(realpath --strip -- "$path")
        b=$(realpath --strip -- "$keeppath")
        if [[ $a == "$b" ]]; then
            keep=1
        fi
    done

    if (( ! keep )); then
        warn "removing old flake at $path"
        rm --recursive --force "${rmflags[@]}" -- "$path"
    fi

    name=$(basename -- "$path")

    nix "${nixflags[@]}" flake update -- "$name" || {
        warn "could not update lockfile to remove $name, is it still being referenced in flake.nix?"
    }
done
